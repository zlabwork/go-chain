package main

import (
    "encoding/hex"
    "github.com/tyler-smith/go-bip32"
    "github.com/tyler-smith/go-bip39"
    "log"
)

// Legacy: m/44'/0'/0'
// SegWit: m/49'/0'/0'
func main() {

    // 1. 生成助记词
    entropy, _ := bip39.NewEntropy(128)
    mnemonic, _ := bip39.NewMnemonic(entropy)
    log.Println("助记词: ", mnemonic) // "youth very amazing tiny minimum bronze firm brass jungle truck fringe snap"

    // 2. 验证助记词
    if !bip39.IsMnemonicValid(mnemonic) {
        panic("Valid Mnemonic")
    }

    // 3. 种子
    //seed, err := bip32.NewSeed()
    //if err != nil {
    //    log.Fatalln("Error generating seed:", err)
    //}
    seed := bip39.NewSeed(mnemonic, "Secret Passphrase") // custom passphrase
    log.Println("种子: ", hex.EncodeToString(seed))

    // 4. 主秘钥
    masterKey, _ := bip32.NewMasterKey(seed)
    publicKey := masterKey.PublicKey()
    log.Println("主XPRV: ", masterKey)
    log.Println("主XPUB: ", publicKey)

    // 4. 子秘钥
    key, _ := masterKey.NewChildKey(uint32(0x80000000) + 44) // m/44'
    key, _ = key.NewChildKey(uint32(0x80000000))             // m/44'/0'

    log.Println("子私钥:", hex.EncodeToString(key.Key))
    log.Println("子公钥:", hex.EncodeToString(key.PublicKey().Key))
}